using Microsoft.AspNetCore.Mvc;

namespace LibraryApi.Controller;

    [Route("api/[controller]")]
    [ApiController]
    
public class AuthorController : ControllerBase
{
    private static int AutoGeneratedId{ get; set; } = 0;

    private static List<Author> authors = new List<Author>{ };
    private readonly DataContext context;
    public AuthorController(DataContext context)
    {
        this.context = context;
    }

        [HttpGet]
        public async Task<ActionResult<List<Author>>> Get()
        {
            return Ok(await context.Authors.ToListAsync());
        }
        [HttpGet]
        [Route("{id}")]
        public async Task<ActionResult<Author>> Get(int id)
        {
            var author = await context.Authors.FindAsync(id);
            if (author == null)
                return NotFound("Author NOT found");
            return Ok(author);
        }
        [HttpPost]
        public async Task<ActionResult<Author>> Post(Author author)
        {
            context.Authors.Add(author);
            await context.SaveChangesAsync();
            return Ok(author);
        }
        [HttpPut]
        public async Task<ActionResult<Author>> Put(Author request)
        {
            var dbAuthor = await context.Authors.FindAsync(request.Id);
            if (dbAuthor == null)
                return NotFound("Author does not exist");
            dbAuthor.FirstName = request.FirstName;
            dbAuthor.LastName = request.LastName;
            dbAuthor.MiddleName = request.MiddleName;
            await context.SaveChangesAsync();
            return Ok(request);
        }
        [HttpDelete]
        [Route("{id}")]
        public async Task<ActionResult<Author>> Delete(int id)
        {
            var dbAuthor = await context.Authors.FindAsync(id);
            if (dbAuthor == null)
                return NotFound("Author does not found.");
             context.Authors.Remove(dbAuthor);
             await context.SaveChangesAsync();
            return Ok(dbAuthor);
        }
}
